/*!\file $CPNT$.c
** \author SMFSW
** \version v0.1
** \date 2017
** \copyright MIT (c) 2017, SMFSW
** \brief $CPNT$ Driver code
**/
/****************************************************************/
#include "$CPNT$.h"
#include "globals.h"

//#if defined(HAL_IWDG_MODULE_ENABLED)
//#include "iwdg.h"
//#endif

#if defined(HAL_I2C_MODULE_ENABLED)
#if defined(I2C_$CPNT$)
/****************************************************************/
// std libs
//#include <math.h>
//#include <stdlib.h>
//#include <string.h>
/****************************************************************/


static I2C_slave			$CPNT$ = { { pNull, $CPNT$_BASE_ADDR, I2C_MEMADD_SIZE_8BIT, I2C_slave_timeout }, 0, HAL_OK, false };


/*!\brief Initialization of the $CPNT$ peripheral
**/
FctERR $CPNT$_Init(void)
{
	I2C_slave_init(&$CPNT$, I2C_$CPNT$, $CPNT$_BASE_ADDR, I2C_MEMADD_SIZE_8BIT, I2C_slave_timeout);
	return ERR_OK;
}


/*!\brief I2C Write function for $CPNT$
** \param[in] Buffer - pointer to write from
** \param[in] Addr - Address to write to
** \param[in] NbChar - Number of bytes to write
** \return FctERR - error code
**/
FctERR $CPNT$_Write(uint8_t * Buffer, uint16_t Addr, uint16_t nb)
{
	//if (Addr > )				{ return ERR_RANGE; }		// Unknown register
	//if ((Addr + NbChar) > )	{ return ERR_OVERFLOW; }	// More bytes than registers

	$CPNT$.status = HAL_I2C_Mem_Write($CPNT$.cfg.inst, $CPNT$.cfg.addr, Addr, $CPNT$.cfg.mem_size, Buffer, nb, $CPNT$.cfg.timeout);
	return HALERRtoFCTERR($CPNT$.status);
}


/*!\brief I2C Read function for $CPNT$
** \param[in] Buffer - pointer to read to
** \param[in] Addr - Address to read from
** \param[in] nb - Number of bytes to read
** \return FctERR - error code
**/
FctERR $CPNT$_Read(uint8_t * Buffer, uint16_t Addr, uint16_t nb)
{
	//if (Addr > )				{ return ERR_RANGE; }		// Unknown register
	//if ((Addr + NbChar) > )	{ return ERR_OVERFLOW; }	// More bytes than registers

	$CPNT$.status = HAL_I2C_Mem_Read($CPNT$.cfg.inst, $CPNT$.cfg.addr, Addr, $CPNT$.cfg.mem_size, Buffer, nb, $CPNT$.cfg.timeout);
	return HALERRtoFCTERR($CPNT$.status);
}


/****************************************************************/
#else
#warning "You have to define I2C_$CPNT$ in globals.h with an I2C instance for this to work!"
#endif
#endif
/****************************************************************/
