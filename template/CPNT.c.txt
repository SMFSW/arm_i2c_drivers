/*!\file $CPNT$.c
** \author SMFSW
** \date 2017
** \copyright MIT (c) 2017, SMFSW
** \brief $CPNT$ Driver code
** \details $CPNT$:
**/
/****************************************************************/
#include "$CPNT$.h"
#include "globals.h"

//#if defined(HAL_IWDG_MODULE_ENABLED)
//#include "iwdg.h"
//#endif

#if defined(HAL_I2C_MODULE_ENABLED)
#if defined(I2C_$CPNT$)
/****************************************************************/
// std libs
//#include <math.h>
//#include <stdlib.h>
//#include <string.h>
/****************************************************************/


I2C_slave $CPNT$_hal = { { pNull, I2C_ADDR($CPNT$_BASE_ADDR), I2C_slave_timeout, I2C_MEMADD_SIZE_8BIT, I2C_FM }, 0, HAL_OK, true, false };


/****************************************************************/


FctERR $CPNT$_Init(void)
{
	I2C_slave_init(&$CPNT$_hal, I2C_$CPNT$, $CPNT$_BASE_ADDR, I2C_slave_timeout);
	
	FctERR err = $CPNT$_Init_Sequence();
	if (err)	{ I2C_set_enable(&$CPNT$_hal, false); }
	
	return err;
}


/****************************************************************/


FctERR $CPNT$_Write(uint8_t * data, uint16_t addr, uint16_t nb)
{
	if (!I2C_is_enabled(&$CPNT$_hal))	{ return ERR_DISABLED; }	// Peripheral disabled
	if (!data)							{ return ERR_MEMORY; }		// Null pointer
	//if (addr > )						{ return ERR_RANGE; }		// Unknown register
	//if ((addr + nb) > last_reg + 1)	{ return ERR_OVERFLOW; }	// More bytes than registers

	I2C_set_busy(&$CPNT$_hal, true);
	
	$CPNT$_hal.status = HAL_I2C_Mem_Write($CPNT$_hal.cfg.inst, $CPNT$_hal.cfg.addr, addr, $CPNT$_hal.cfg.mem_size, data, nb, $CPNT$_hal.cfg.timeout);
	
	I2C_set_busy(&$CPNT$_hal, false);
	return HALERRtoFCTERR($CPNT$_hal.status);
}


FctERR $CPNT$_Read(uint8_t * data, uint16_t addr, uint16_t nb)
{
	if (!I2C_is_enabled(&$CPNT$))		{ return ERR_DISABLED; }	// Peripheral disabled
	if (!data)							{ return ERR_MEMORY; }		// Null pointer
	//if (addr > )						{ return ERR_RANGE; }		// Unknown register
	//if ((addr + nb) > last_reg + 1)	{ return ERR_OVERFLOW; }	// More bytes than registers

	I2C_set_busy(&$CPNT$_hal, true);
	
	$CPNT$_hal.status = HAL_I2C_Mem_Read($CPNT$_hal.cfg.inst, $CPNT$_hal.cfg.addr, addr, $CPNT$_hal.cfg.mem_size, data, nb, $CPNT$_hal.cfg.timeout);
	
	I2C_set_busy(&$CPNT$_hal, false);
	return HALERRtoFCTERR($CPNT$_hal.status);
}


/****************************************************************/
#elif !defined(NO_WARN_I2C_DRIVERS)
#warning "You have to define I2C_$CPNT$ in globals.h with an I2C instance for this to work!"
#endif
#endif
/****************************************************************/
