/*!\file $CPNT$.c
** \author SMFSW
** \copyright MIT (c) 2017-2021, SMFSW
** \brief $CPNT$ Driver
** \details $CPNT$:
**/
/****************************************************************/
#include "$CPNT$.h"

#if defined(HAL_I2C_MODULE_ENABLED)
#if defined(I2C_$CPNT$)
/****************************************************************/
// std libs
//#include <math.h>
//#include <stdlib.h>
/****************************************************************/


I2C_slave_t $CPNT$_hal = { { pNull, 0, I2C_slave_timeout, I2C_MEMADD_SIZE_8BIT, I2C_FM }, 0, HAL_OK, true, false };


/****************************************************************/


__WEAK FctERR $CPNT$_Init(void)
{
	FctERR err;

	err = I2C_slave_init(&$CPNT$_hal, I2C_$CPNT$, $CPNT$_BASE_ADDR, $CPNT$_hal.cfg.timeout);
	if (!err)	{ err = $CPNT$_Init_Sequence(); }

	if (err)	{ I2C_set_enable(&$CPNT$_hal, false); }

	return err;
}


/****************************************************************/


FctERR NONNULL__ $CPNT$_Write(const uint8_t * data, const uint16_t addr, const uint16_t nb)
{
	if (!I2C_is_enabled(&$CPNT$_hal))	{ return ERROR_DISABLED; }	// Peripheral disabled
	//if (addr > )						{ return ERROR_RANGE; }		// Unknown register
	//if ((addr + nb) > last_reg + 1)	{ return ERROR_OVERFLOW; }	// More bytes than registers

	I2C_set_busy(&$CPNT$_hal, true);
	$CPNT$_hal.status = HAL_I2C_Mem_Write($CPNT$_hal.cfg.bus_inst, $CPNT$_hal.cfg.addr, addr, $CPNT$_hal.cfg.mem_size, (uint8_t *) data, nb, $CPNT$_hal.cfg.timeout);
	I2C_set_busy(&$CPNT$_hal, false);
	return HALERRtoFCTERR($CPNT$_hal.status);
}


FctERR NONNULL__ $CPNT$_Read(uint8_t * data, const uint16_t addr, const uint16_t nb)
{
	if (!I2C_is_enabled(&$CPNT$_hal))	{ return ERROR_DISABLED; }	// Peripheral disabled
	//if (addr > )						{ return ERROR_RANGE; }		// Unknown register
	//if ((addr + nb) > last_reg + 1)	{ return ERROR_OVERFLOW; }	// More bytes than registers

	I2C_set_busy(&$CPNT$_hal, true);
	$CPNT$_hal.status = HAL_I2C_Mem_Read($CPNT$_hal.cfg.bus_inst, $CPNT$_hal.cfg.addr, addr, $CPNT$_hal.cfg.mem_size, data, nb, $CPNT$_hal.cfg.timeout);
	I2C_set_busy(&$CPNT$_hal, false);
	return HALERRtoFCTERR($CPNT$_hal.status);
}


/****************************************************************/
#elif !defined(NO_WARN_I2C_DRIVERS)
#warning "You have to define I2C_$CPNT$ for component to be enabled!"
#endif
#endif
/****************************************************************/
