/*!\file $CPNT$_proc.c
** \author SMFSW
** \copyright MIT (c) 2017-2023, SMFSW
** \brief $CPNT$ Driver procedures
** \details $CPNT$:
**/
/****************************************************************/
#include "$CPNT$.h"

#if defined(HAL_I2C_MODULE_ENABLED)
#if defined(I2C_$CPNT$)
/****************************************************************/
// std libs
//#include <math.h>
//#include <stdlib.h>
/****************************************************************/


$CPNT$_t $CPNT$[I2C_$CPNT$_NB] = { 0 };


/****************************************************************/


__WEAK FctERR NONNULL__ $CPNT$_Init_Sequence($CPNT$_t * const pCpnt)
{
	FctERR err;

	// get ID & check against values for $CPNT$
	err = $CPNT$_Get_ChipID(pCpnt, &pCpnt->cfg.Id);
	if (err)								{ return err; }
	if (pCpnt->cfg.Id != $CPNT$_CHIP_ID)	{ return ERROR_COMMON; }	// Unknown device

	pCpnt->cfg.$CPNT$_param_1 = 1;

	return ERROR_OK;
}


/****************************************************************/


__WEAK FctERR NONNULL__ $CPNT$_handler($CPNT$_t * const pCpnt)
{
	FctERR	err;

	err = $CPNT$_Read(pCpnt->cfg.slave_inst, &pCpnt->$CPNT$_val_1, $CPNT$__REG1, 1);
	if (err)	{ return err; }

	#if defined(VERBOSE)
		const uint8_t idx = pCpnt - $CPNT$;
		printf("$CPNT$ id%d: FUBARED %d", idx, pCpnt->$CPNT$_val_1);
	#endif

	return ERROR_OK;
}


__WEAK FctERR NONNULL__ $CPNT$_handler_it($CPNT$_t * const pCpnt)
{
	FctERR	err;
	bool	interrupt;

	err = $CPNT$_RDY_GPIO_Get(pCpnt, &interrupt);
	if ((!err) && interrupt)	{ err = $CPNT$_handler(pCpnt); }

	return err;
}


/****************************************************************/
#endif
#endif
/****************************************************************/
