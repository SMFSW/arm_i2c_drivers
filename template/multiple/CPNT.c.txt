/*!\file $CPNT$.c
** \author SMFSW
** \copyright MIT (c) 2017-2025, SMFSW
** \brief $CPNT$ Driver
** \details $CPNT$:
**/
/****************************************************************/
#include "$CPNT$.h"

#if defined(HAL_I2C_MODULE_ENABLED)
#if defined(I2C_$CPNT$)
/****************************************************************/
// std libs
//#include <math.h>
//#include <stdlib.h>
/****************************************************************/


static const I2C_slave_t $CPNT$_defaults = { { pNull, 0, I2C_slave_timeout, I2C_MEMADD_SIZE_8BIT, I2C_FM }, 0, HAL_OK, true, false };

static I2C_slave_t $CPNT$_hal[I2C_$CPNT$_NB];	//!< $CPNT$ Slave structure


/****************************************************************/


FctERR NONNULL__ $CPNT$_Init(const uint8_t idx, I2C_HandleTypeDef * const hi2c, const uint16_t devAddress)
{
	FctERR	err;

	assert_param(IS_I2C_PERIPHERAL($CPNT$, idx));

	I2C_PERIPHERAL_SET_DEFAULTS($CPNT$, idx);

	I2C_slave_init(&$CPNT$_hal[idx], hi2c, devAddress, $CPNT$_hal[idx].cfg.timeout);
	
	err = $CPNT$_Init_Sequence(&$CPNT$[idx]);

	if (err)	{ I2C_set_enable(&$CPNT$_hal[idx], false); }

	return ERROR_OK;
}

FctERR $CPNT$_Init_Single(void) {
	return $CPNT$_Init(0, I2C_$CPNT$, $CPNT$_BASE_ADDR); }

/****************************************************************/


FctERR NONNULL__ $CPNT$_Write(I2C_slave_t * const pSlave, const uint8_t * data, const uint16_t addr, const uint16_t nb)
{
	if (!I2C_is_enabled(pSlave))		{ return ERROR_DISABLED; }	// Peripheral disabled
	//if ((addr + nb) > last_reg + 1)	{ return ERROR_OVERFLOW; }	// More bytes than registers

	I2C_set_busy(pSlave, true);
	pSlave->status = HAL_I2C_Mem_Write(pSlave->cfg.bus_inst, pSlave->cfg.addr, addr, pSlave->cfg.mem_size, (uint8_t *) data, nb, pSlave->cfg.timeout);
	I2C_set_busy(pSlave, false);
	return HALERRtoFCTERR(pSlave->status);
}


FctERR NONNULL__ $CPNT$_Read(I2C_slave_t * const pSlave, uint8_t * data, const uint16_t addr, const uint16_t nb)
{
	if (!I2C_is_enabled(pSlave))		{ return ERROR_DISABLED; }	// Peripheral disabled
	//if ((addr + nb) > last_reg + 1)	{ return ERROR_OVERFLOW; }	// More bytes than registers

	I2C_set_busy(pSlave, true);
	pSlave->status = HAL_I2C_Mem_Read(pSlave->cfg.bus_inst, pSlave->cfg.addr, addr, pSlave->cfg.mem_size, data, nb, pSlave->cfg.timeout);
	I2C_set_busy(pSlave, false);
	return HALERRtoFCTERR(pSlave->status);
}


FctERR NONNULL__ $CPNT$_Write_Word(I2C_slave_t * const pSlave, const uint16_t * data, const uint16_t addr)
{
	uint8_t	WREG[2];

	if (addr % sizeof(uint16_t))	{ return ERROR_FRAMING; }		// Unaligned word access

	WREG[0] = LOBYTE(*data);
	WREG[1] = HIBYTE(*data);
	return $CPNT$_Write(pSlave, WREG, addr, 2);
}


FctERR NONNULL__ $CPNT$_Read_Word(I2C_slave_t * const pSlave, uint16_t * data, const uint16_t addr)
{
	uint8_t	WREG[2];
	FctERR	err;

	if (addr % sizeof(uint16_t))	{ return ERROR_FRAMING; }		// Unaligned word access

	err = $CPNT$_Read(pSlave, WREG, addr, 2);
	if (err)	{ return err; }

	*data = MAKEWORD(WREG[0], WREG[1]);
	return ERROR_OK;
}


/****************************************************************/
#endif
#endif
/****************************************************************/
